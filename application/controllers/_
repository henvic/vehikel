		$request = $this->getRequest();
			$this->view->report_done = true;
		$this->view->abuseForm = $form;
    		$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "login"), array("exit"));
    	$request = $this->getRequest();
		        $this->view->securitycode = $securitycode;
				$mail->setBodyText($this->view->render("account/emailChange.phtml"))
    			$this->view->changeEmail = true;
    			$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("username" => $signedUserInfo['alias']), "profile")."?about_check=true", array("exit"));
    	$this->view->accountForm = $form;
    	$request = $this->getRequest();
    		$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "accounttwitter"), array("exit"));
        			$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "accounttwitter"), array("exit"));
    				$this->view->twitterApiError = true;
    		$this->view->twitterAuthenticateUrl = $twitterObj->getAuthenticateUrl();
    				$this->view->invalidTwitterAccount = true;
    				$this->view->twitterAuthenticateUrl = $twitterObj->getAuthenticateUrl();
    		$this->view->twitterInfo = $twitterInfo;
    	$request = $this->getRequest();
    	$this->view->submitPictureForm = $form;
		$request = $this->getRequest();
		$this->_helper->loadOauthstore->setinstance();
			$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "accountapps"), array("exit"));
		$this->view->listConsumerTokens = $listConsumer;
    		$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "login"), array("exit"));
    	$request = $this->getRequest();
    		    $this->_redirect("/account/terminated", array("exit"));
    	$this->view->deleteAccountForm = $form;
			$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "login"), array("exit"));
		$this->view->headTitle("Recent activity");
		$this->_helper->loadOauthstore->setinstance();
		$request = $this->getRequest();
			$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "login"), array("exit"));
		$this->_helper->loadOauthstore->preloadServer();
		$form = $this->_authorizeForm();
    	$this->view->consumerInfo = $consumer;
    			$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "accountapps") . "?new_addition", array("exit"));
    	$this->view->authorizeForm = $form;
		if(!$auth->hasIdentity()) $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "login"), array("exit"));
		$this->view->listConsumers = $listConsumers;
		if(!$auth->hasIdentity()) $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "login"), array("exit"));
		$request = $this->getRequest();
		$form = $this->_apiKeyForm();
			$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("api_key" => $key), "api_key"), array("exit"));
		$this->view->apiKeyForm = $form;
			$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "login"), array("exit"));
		$request = $this->getRequest();
		$form = $this->_apiKeyForm($consumer);
		$this->view->consumerData = $consumer;
		$this->view->apiKeyForm = $form;
			$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "login"), array("exit"));
		$request = $this->getRequest();
		$form = $this->_deleteForm($consumer);
			$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "apikeys") . "?api_key_deleted=".$params['api_key'], array("exit"));
		$this->view->form = $form;
		$this->view->consumerData = $consumer;
		$this->_helper->loadResource->pseudoshareSetUp();
		$request = $this->getRequest();
				return $this->_forward("commentpermalink");
			$this->view->commentPreview = $commentMsg;
		$this->view->commentForm = $form;
		$request = $this->getRequest();
		$form = $this->_deleteCommentForm($comment['id']);
			$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("username" => $userInfo['alias'], "share_id" => $shareInfo['id']), "sharepage_1stpage"), array("exit"));
		$this->view->form = $form;
		$this->view->comment = $comment;
		$request = $this->getRequest();
		$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("username" => $userInfo['alias'], "share_id" => $shareInfo['id'], "page" => $position['page']), $route).'#comment'.$comment_id, array("exit"));
		$this->_helper->loadResource->pseudoshareSetUp();
		$request = $this->getRequest();
		if((!$paginator->count() && $page != 1) || $paginator->getCurrentPageNumber() != $page) $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("username" => $userInfo['alias']), "contactsrev_1stpage"), array("exit"));
		$this->view->paginator = $paginator;
		$request = $this->getRequest();
		if((!$paginator->count() && $page != 1) || $paginator->getCurrentPageNumber() != $page) $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("username" => $userInfo['alias']), "contacts_1stpage"), array("exit"));
		$this->view->paginator = $paginator;
		$request = $this->getRequest();
		if((!$paginator->count() && $page != 1) || $paginator->getCurrentPageNumber() != $page) $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("username" => $userInfo['alias']), "ignore_1stpage"), array("exit"));
		$this->view->paginator = $paginator;
		$request = $this->getRequest();
		if(!$auth->hasIdentity()) $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "login"), array("exit"));
		if($auth->getIdentity() == $userInfo['id']) $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("username" => $userInfo['alias']), "contacts_1stpage"), array("exit"));
		if(is_array($ignore_status)) $this->view->cannot_add_ignored = $ignore_status;
			$form = $this->_relationshipForm();
				$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("username" => $userInfo['alias']), "profile").$change_rel, array("exit"));
		$this->view->relationshipForm = $form;
    	$request = $this->getRequest();
    	if(!is_object($changeInfo)) $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "index") . "?email_not_confirmed", array("exit"));
    		$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "index"), array("exit"));
    			$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "account") . "?email_confirmed=true", array("exit"));
    			$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "index") . "?email_confirmed=true", array("exit"));
	    $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "login") . "?email_confirmed=true", array("exit"));
//see $this->statusCode for view 
    	$request = $this->getRequest();
        $this->_helper->viewRenderer->setViewSuffix('phtml');
        $errors = $this->_getParam('error_handler');
                $this->getResponse()->setHttpResponseCode(404);
                $this->view->statusCode = 404; 
                $this->view->message = 'Page not found'; 
                	$this->getResponse()->setHttpResponseCode(404);
                	$this->view->statusCode = 404;
                	$this->view->message = 'Page not found';
                	$this->getResponse()->setHttpResponseCode(500);
                	$this->view->statusCode = 500;
                	$this->view->message = 'Application error';
        $this->view->exception = $errors->exception; 
        $this->view->request   = $errors->request; 
		$this->_redirect("/help", array("exit"));
		$action = $this->getRequest()->getActionName();
		$this->_helper->loadResource->pseudoshareSetUp();
		$request = $this->getRequest();
		$this->_helper->layout->disableLayout();
		$this->_redirect($this->getFrontController()->getRouter()->assemble($params, "sharepage_1stpage"), array("exit"));
		$request = $this->getRequest();
		if((!$paginator->count() && $page != 1) || $paginator->getCurrentPageNumber() != $page) $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("username" => $userInfo['alias'], "share_id" => $shareInfo['id']), "favorites_1stpage"), array("exit"));
		$this->view->paginator = $paginator;
		$request = $this->getRequest();
		if((!$paginator->count() && $page != 1) || $paginator->getCurrentPageNumber() != $page) $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("username" => $userInfo['alias']), "userfav_1stpage"), array("exit"));
		$this->view->paginator = $paginator;
		if((!$paginator->count() && $page != 1) || $paginator->getCurrentPageNumber() != $page) $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("username" => $userInfo['alias'], "share_id" => $shareInfo['id']), "sharepage_1stpage"), array("exit"));
						$this->view->commentPreview = $newCommentMsg;
							$this->view->commentPreview = $newCommentMsg;
							return $this->_forward("commentpermalink", "comments");
				$this->view->commentForm = $commentForm;
				 $this->view->twitterForm = $Twitter->form();
		$this->view->tagsList = $tagsList;
		$this->view->paginator = $paginator;
		$this->_helper->loadResource->pseudoshareSetUp();
		$request = $this->getRequest();
		$this->_helper->loadResource->pseudoshareSetUp();
				return $this->_forward(current($where), key($where));
		$this->_helper->loadResource->pseudoshareSetUp();
		$request = $this->getRequest();
		if(((!$paginator->count() && $page != 1) && $page != 1) || $paginator->getCurrentPageNumber() != $page) $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("username" => $userInfo['alias']), "filestream_1stpage"), array("exit"));
		$this->view->paginator = $paginator;
		$this->_helper->loadResource->pseudoshareSetUp();
		$request = $this->getRequest();
		if(!$auth->hasIdentity()) $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "login"), array("exit"));
		if($auth->getIdentity() == $userInfo['id']) $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "index"), array("exit"));
		$form = $this->_ignoreForm();//has to be loaded after the line above
			if(isset($what_action)) $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("username" => $userInfo['alias']), "profile"), array("exit"));
		$this->view->ignore_form = $form;
		$this->view->ignore_status = $ignore_status;
    		return $this->_forward(("avoidindexdotphp"));
    		$this->_forward("signed");
    		$this->_forward("unsigned");
			$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "index"), array("exit"));
			$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "index"), array("exit"));
    	$request = $this->getRequest();
    		$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "index"), array("exit"));
        	$this->view->entry = $newUserInfo;
        	$mail->setBodyText($this->view->render("join/email.phtml"))
			$this->view->success = true;
    		$this->view->signUpForm = $form;
			$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "index"), array("exit"));
    	$request = $this->getRequest();
    		$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "index") . "?not_found", array("exit"));
    		$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "join_welcome"), array("exit"));
    	$this->view->entry = $confirmationInfo;
	    $this->view->confirmForm = $form;
			$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "login"), array("exit"));
    	//$this->view->alias = $form->getValue("newusername");
    	$this->view->joined = true;
    		$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "index"), array("exit"));
        $request = $this->getRequest();
        	$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "index"), array("exit"));
	    	$this->view->errorlogin = true;
		$this->view->loginform = $form;
		if(!Zend_Auth::getInstance()->hasIdentity()) $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "index"), array("exit"));
    	$request = $this->getRequest();
    		$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "account") . "?remote_logout=true", array("exit"));
    	$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "index"), array("exit"));
    		$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "index"), array("exit"));
    	$request = $this->getRequest();
        	$this->view->securitycode = $securitycode;
        	$this->view->recoverUser = $getUser;
        	$this->view->recovering = true;
			$mail->setBodyText($this->view->render("password/emailRecover.phtml"))
    	$this->view->recoverForm = $form;
    	$request = $this->getRequest();
    	$this->view->request = $request;
    		$form = $this->_getNewPasswordForm();
				$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "index"), array("exit"));
			$form = $this->_getNewPasswordForm($request->getParam("confirm_uid"), $request->getParam("security_code"));
				$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "index"), array("exit"));
				$this->view->passwordReset = true;
		if(!isset($this->view->passwordReset)) {
			$this->view->passwordForm = $form;
		$this->_helper->loadResource->pseudoshareSetUp();
		$request = $this->getRequest();
		$request = $this->getRequest();
		$this->_helper->loadResource->pseudoshareSetUp();
		$request = $this->getRequest();
		$form = $this->_editForm();
			$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("username" => $signedUserInfo['alias'], "share_id" => $shareInfo['id']), "sharepage_1stpage"), array("exit"));
		$this->view->editForm = $form;
		$request = $this->getRequest();
		$form = $this->_deleteForm();
			if(!empty($forget)) $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("username" => $signedUserInfo['alias']), "filestream_1stpage"), array("exit"));
			$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("username" => $signedUserInfo['alias']), "filestream_1stpage") . "?share-erased=true", array("exit"));
		$this->view->deleteForm = $form;
		$request = $this->getRequest();
				$this->_helper->viewRenderer->setScriptAction($find_path);
			$this->_forward("notstatic");//workaround to say a page does not exists
		$this->_helper->layout->disableLayout();
		$request = $this->getRequest();
		return $this->_forward("tags");
		$request = $this->getRequest();
			$ajaxContext = $this->_helper->AjaxContext();
		return $this->_forward("tags");
		$request = $this->getRequest();
		$this->_redirect($this->getFrontController()->getRouter()->assemble($params, "sharepage_1stpage"), array("exit"));
		$this->view->tagsList = $tagsList;
		$this->_helper->loadResource->pseudoshareSetUp();
		$request = $this->getRequest();
		if((!$paginator->count() && $page != 1) || $paginator->getCurrentPageNumber() != $page) $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("username" => $userInfo['alias'], "tag" => $cleanTag), "tagpage_1stpage"), array("exit"));
			$this->getResponse()->setHttpResponseCode(404);
		$this->view->tagname = $cleanTag;
		$this->view->paginator = $paginator;
		$this->view->taglist = $Tags->getUserTags($userInfo['id']);
		$request = $this->getRequest();
		$this->_helper->layout->disableLayout();
				$this->view->tweetResponse = $response;
					$this->view->tweetResponse = array("error" => "msg_too_long");
			$this->_redirect($this->getFrontController()->getRouter()->assemble($params, "sharepage_1stpage"), array("exit"));
		$request = $this->getRequest();
		if(!$auth->hasIdentity()) $this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array(), "login"), array("exit"));
		if(!$config->upload->available) $this->_forward("offline");
		$form = $this->_uploadForm();
				$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("username" => $signedUserInfo['alias']), "filestream_1stpage") . "?uploaded=true", array("exit"));
				$this->_redirect(Zend_Controller_Front::getInstance()->getRouter()->assemble(array("username" => $signedUserInfo['alias'], "share_id" => $uploaded[0]), "editsharepage"), array("exit"));
		$this->view->uploadForm = $form;
		$this->view->uploadStatus = $uploadStatus;
		$this->_helper->loadResource->pseudoshareSetUp();
		$request = $this->getRequest();
		$this->_helper->layout->disableLayout();
		$this->_helper->viewRenderer->setNoRender();
			$description = (empty($share['description_filtered'])) ? $this->view->escape($share['short']) : $share['description_filtered'];
			$enclosure_element->appendChild($doc->newTextAttribute("url", $this->view->escape($config->services->S3->sharesBucketAddress.$userInfo['alias']."/".$share['id']."-".$share['download_secret']."/".$share['filename'])));
		$request = $this->getRequest();
